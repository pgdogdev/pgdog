//! PgDog example plugin.
//!
//! All methods, except the ones generated by the `plugin!` macro, are optional.
//!
//! Implementing none of them produces a plugin that doesn't do anything, but it can
//! still be loaded at runtime.
//!

pub mod plugin;

use pgdog_plugin::{PdRoute, PdRouterContext, macros};

// This identifies this library is a PgDog plugin and adds some
// required methods automatically.
macros::plugin!();

/// Perform any plugin initialization routines here.
/// These are running sync on boot, so make these fast.
#[macros::init]
fn init() {
    println!("hello plugin");
}

/// If defined, this function is called on every query going through PgDog.
///
/// It's provided with the AST generated by pg_query and context on how many databases
/// PgDog is proxying.
///
/// N.B. Like all functions called via the FFI interface, it cannot return an error or panic.
///
#[macros::route]
fn route(context: PdRouterContext) -> PdRoute {
    crate::plugin::route_query(context).unwrap_or(PdRoute::unknown())
}

/// Run any code before PgDog is shut down.
///
/// This allows for plugins to upload stats to some external service
/// or perform some cleanup routines.
///
/// N.B. This is sync and will prevent from PgDog from exiting if it gets stuck.
///
#[macros::fini]
fn shutdown() {}
