name: ci
on:
  push:

jobs:
  fmt:
    runs-on: blacksmith-4vcpu-ubuntu-2404
    steps:
      - uses: actions/checkout@v4
      - uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          override: true
      - name: Install CMake 3.31
        run: |
          sudo apt update && sudo apt install -y mold clang pkg-config protobuf-compiler
          sudo apt remove cmake
          sudo pip3 install cmake==3.31.6
          cmake --version
      - name: Format
        run: cargo fmt --all -- --check
      - name: Clippy
        working-directory: pgdog
        run: cargo clippy
  build:
    runs-on: blacksmith-4vcpu-ubuntu-2404
    steps:
      - uses: actions/checkout@v4
      - uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          override: true
      - name: Install CMake 3.31
        run: |
          sudo apt update && sudo apt install -y mold clang pkg-config protobuf-compiler
          sudo apt remove cmake
          sudo pip3 install cmake==3.31.6
          cmake --version
      - name: Install Kerberos dependencies
        run: |
          sudo apt update
          sudo DEBIAN_FRONTEND=noninteractive apt install -y libkrb5-dev krb5-user krb5-config libgssapi-krb5-2
      - name: Build
        run: cargo build --features gssapi
      - name: Check release
        run: cargo check --release --features gssapi
  tests:
    runs-on: blacksmith-4vcpu-ubuntu-2404
    steps:
      - uses: actions/checkout@v4
      - uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          override: true
      - uses: useblacksmith/rust-cache@v3
        with:
          prefix-key: "v1" # Change this when updating tooling
      - name: Install Kerberos dependencies
        run: |
          sudo apt update
          sudo DEBIAN_FRONTEND=noninteractive apt install -y libkrb5-dev krb5-user krb5-config libgssapi-krb5-2 krb5-kdc krb5-admin-server
      - name: Setup Kerberos and create test keytabs
        run: |
          # The unified script handles everything: KDC setup, service start, keytab creation
          chmod +x integration/gssapi/setup_test_keytabs.sh
          CI=true sudo -E bash integration/gssapi/setup_test_keytabs.sh

          # Make keytabs readable by the test user
          sudo chown -R $USER:$USER integration/gssapi/keytabs/
      - name: Setup PostgreSQL
        run: |
          sudo service postgresql start
          sudo -u postgres createuser --superuser --login $USER
          sudo -u postgres createdb $USER
          sudo -u postgres psql -c 'ALTER SYSTEM SET max_prepared_transactions TO 1000;'
          sudo service postgresql restart
          bash integration/setup.sh
          sudo apt install -y python3-virtualenv mold clang pkg-config protobuf-compiler
          sudo gem install bundler
          sudo apt remove -y cmake
          sudo pip3 install cmake==3.31.6
          cmake --version
          cargo install cargo-nextest --version "0.9.78" --locked
          bash integration/toxi/setup.sh
      - name: Install test dependencies
        run: cargo install cargo-nextest --version "0.9.78" --locked
      - name: Run tests with GSSAPI
        run: cargo nextest run -E 'package(pgdog)' --no-fail-fast --test-threads=1 --features gssapi
      - name: Run documentation tests
        run: cargo test --doc --features gssapi
  integration:
    runs-on: blacksmith-4vcpu-ubuntu-2404
    steps:
      - uses: actions/checkout@v4
      - uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          override: true
      - uses: useblacksmith/rust-cache@v3
        with:
          prefix-key: release-1
      - name: Setup dependencies
        run: |
          sudo service postgresql start
          sudo -u postgres createuser --superuser --login $USER
          sudo -u postgres createdb $USER
          sudo -u postgres psql -c 'ALTER SYSTEM SET max_connections TO 1000;'
          sudo -u postgres psql -c 'ALTER SYSTEM SET max_prepared_transactions TO 1000;'
          sudo service postgresql restart
          bash integration/setup.sh
          sudo apt update && sudo apt install -y python3-virtualenv mold clang pkg-config protobuf-compiler
          sudo gem install bundler
          sudo apt remove -y cmake
          sudo pip3 install cmake==3.31.6
          cmake --version
          cargo install cargo-nextest --version "0.9.78" --locked
          bash integration/toxi/setup.sh
          sudo curl -SL https://github.com/docker/compose/releases/download/v2.36.1/docker-compose-linux-x86_64 -o /usr/local/bin/docker-compose
          sudo chmod +x /usr/local/bin/docker-compose
      - name: Build PgDog
        run: cargo build --release
      - name: Load balancer
        run: bash integration/load_balancer/run.sh
      - name: pgbench
        run: bash integration/pgbench/run.sh
      - name: Go
        run: bash integration/go/run.sh
      - name: JavaScript
        run: bash integration/js/pg_tests/run.sh
      - name: Toxi
        run: bash integration/toxi/run.sh
      - name: Python
        run: bash integration/python/run.sh
      - name: Ruby
        run: bash integration/ruby/run.sh
      - name: Java
        run: bash integration/java/run.sh
      - name: More complex stuff
        run: bash integration/complex/run.sh
      - name: Rust
        run: bash integration/rust/run.sh
      - name: Dry run
        run: bash integration/dry_run/run.sh
      # - name: Plugins
      #   run: bash integration/plugins/run.sh
